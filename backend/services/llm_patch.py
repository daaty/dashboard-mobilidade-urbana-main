#!/usr/bin/env python3
"""
Patch para tornar o LLM mais inteligente - an√°lise real de dados
"""
def intelligent_mock_chat_response(question: str) -> dict:
    """LLM inteligente que analisa dados reais"""
    from datetime import datetime
    from backend.api.dashboard import get_overview
    from flask import Flask, request, g
    from backend.models import db
    
    def get_dashboard_data():
        """Wrapper para obter dados do dashboard"""
        try:
            # Simular contexto Flask se necess√°rio
            if not hasattr(g, '_database'):
                with Flask(__name__).app_context():
                    response = get_overview()
                    return response.get_json().get('data', {})
            else:
                response = get_overview()
                return response.get_json().get('data', {})
        except Exception as e:
            print(f"Erro ao obter dados: {e}")
            return {
                'metricas_principais': {
                    'total_corridas': 0,
                    'corridas_concluidas': 0,
                    'corridas_canceladas': 0,
                    'receita_total': 0,
                    'motoristas_ativos': 0
                }
            }
    
    question_lower = question.lower().strip()
    
    # Sauda√ß√µes simples
    if any(word in question_lower for word in ['oi', 'ol√°', 'ola', 'hello', 'hi', 'hey']):
        response = "üëã Ol√°! Sou seu analista de dados especializado em mobilidade urbana. Posso te ajudar a entender m√©tricas, identificar oportunidades e otimizar opera√ß√µes. O que voc√™ gostaria de analisar?"
    
    # Confirma√ß√µes
    elif any(word in question_lower for word in ['ok', 'blz', 'beleza', 'certo', 'legal', 'show', 'tranquilo']):
        response = "‚úÖ Perfeito! Estou aqui para analisar qualquer aspecto do seu neg√≥cio de mobilidade urbana. Posso examinar padr√µes de corridas, performance de motoristas, otimiza√ß√£o de pre√ßos... Em que posso focar?"
    
    # Despedidas
    elif any(word in question_lower for word in ['tchau', 'at√© logo', 'ate logo', 'bye', 'fui']):
        response = "üëã At√© logo! Continue focando no crescimento sustent√°vel da opera√ß√£o. Estarei aqui sempre que precisar de an√°lises!"
    
    # AN√ÅLISE REAL DOS DADOS
    else:
        try:
            dashboard_data = get_dashboard_data()
            metrics = dashboard_data.get('metricas_principais', {})
            
            # Extrair dados reais
            total_corridas = metrics.get('total_corridas', 0)
            corridas_concluidas = metrics.get('corridas_concluidas', 0)
            corridas_canceladas = metrics.get('corridas_canceladas', 0)
            receita_total = metrics.get('receita_total', 0)
            motoristas_ativos = metrics.get('motoristas_ativos', 0)
            avaliacao_media = metrics.get('avaliacao_media', 0)
            
            # An√°lise inteligente baseada na pergunta
            if any(word in question_lower for word in ['corrida', 'viagem', 'trajeto', 'demanda']):
                if total_corridas == 0:
                    response = "üöó **An√°lise de Corridas**: Sistema em fase inicial - dados zerados.\n\nüìã **Estrat√©gia de Lan√ßamento**:\n‚Ä¢ **Fase 1**: Recrutar 5-10 motoristas piloto\n‚Ä¢ **Fase 2**: Campanha de lan√ßamento para usu√°rios\n‚Ä¢ **Meta inicial**: 50-100 corridas/semana\n‚Ä¢ **KPI alvo**: Taxa de convers√£o >80%"
                else:
                    taxa_sucesso = (corridas_concluidas / total_corridas) * 100
                    taxa_cancelamento = (corridas_canceladas / total_corridas) * 100
                    status = "üü¢ Excelente" if taxa_sucesso >= 80 else "üü° Pode melhorar" if taxa_sucesso >= 60 else "üî¥ Cr√≠tico"
                    
                    response = f"üöó **An√°lise de Corridas** {status}\n\n‚Ä¢ **Total**: {total_corridas} corridas\n‚Ä¢ **Taxa de Sucesso**: {taxa_sucesso:.1f}%\n‚Ä¢ **Cancelamentos**: {taxa_cancelamento:.1f}%\n\n**Insight**: {'Performance excepcional!' if taxa_sucesso >= 80 else 'Investigar causas de cancelamentos e otimizar matching.'}"
            
            elif any(word in question_lower for word in ['receita', 'dinheiro', 'faturamento', 'financeiro', 'ganho']):
                if receita_total == 0:
                    response = "üí∞ **An√°lise Financeira**: Receita zerada - oportunidade de estrutura√ß√£o!\n\nüí° **Modelo Recomendado**:\n‚Ä¢ **Pre√ßo base**: R$ 3,50 bandeirada + R$ 1,80/km\n‚Ä¢ **Comiss√£o**: 20-25% por corrida\n‚Ä¢ **Meta m√™s 1**: R$ 10.000 de GMV\n‚Ä¢ **Estrat√©gia**: Promo√ß√µes de lan√ßamento para ganhar tra√ß√£o"
                else:
                    ticket_medio = receita_total / max(corridas_concluidas, 1)
                    performance = "üü¢ Excelente" if ticket_medio >= 25 else "üü° Bom" if ticket_medio >= 15 else "üî¥ Baixo"
                    
                    response = f"üí∞ **An√°lise Financeira** {performance}\n\n‚Ä¢ **Receita Total**: R$ {receita_total:,.2f}\n‚Ä¢ **Ticket M√©dio**: R$ {ticket_medio:.2f}\n‚Ä¢ **Corridas Pagas**: {corridas_concluidas}\n\n**Estrat√©gia**: {'Manter padr√£o atual' if ticket_medio >= 20 else 'Implementar pre√ßos din√¢micos por hor√°rio/regi√£o'}"
            
            elif any(word in question_lower for word in ['motorista', 'driver', 'condutor']):
                if motoristas_ativos == 0:
                    response = "üë• **An√°lise de Motoristas**: Base vazia - CR√çTICO! üö®\n\n‚ö° **A√ß√£o Urgente**:\n‚Ä¢ **Recrutamento**: Programa intensivo de capta√ß√£o\n‚Ä¢ **Incentivos**: R$ 200 b√¥nus nas primeiras 20 corridas\n‚Ä¢ **Meta inicial**: 15-20 motoristas ativos\n‚Ä¢ **Parcerias**: Cooperativas e frotas existentes"
                else:
                    produtividade = total_corridas / motoristas_ativos
                    eficiencia = "üü¢ Alta" if produtividade >= 10 else "üü° M√©dia" if produtividade >= 5 else "üî¥ Baixa"
                    
                    response = f"üë• **An√°lise de Motoristas** {eficiencia} produtividade\n\n‚Ä¢ **Ativos**: {motoristas_ativos} motoristas\n‚Ä¢ **Corridas/Motorista**: {produtividade:.1f}\n‚Ä¢ **Avalia√ß√£o**: {avaliacao_media:.1f}/5.0\n\n**A√ß√£o**: {'Focar em reten√ß√£o e qualidade' if produtividade >= 8 else 'Programas de engajamento e incentivos por meta'}"
            
            elif any(word in question_lower for word in ['crescimento', 'crescer', 'expandir', 'melhorar', 'estrat√©gia']):
                response = "üìà **Estrat√©gias de Crescimento Inteligente**:\n\nüéØ **Expans√£o Imediata**:\n‚Ä¢ **Geogr√°fica**: Mapear bairros de alta demanda\n‚Ä¢ **Temporal**: Pre√ßos din√¢micos em hor√°rios rush\n‚Ä¢ **Parcerias**: Empresas, hot√©is, aeroporto\n\nüöÄ **Inova√ß√£o**:\n‚Ä¢ **Fideliza√ß√£o**: Programa de pontos para usu√°rios\n‚Ä¢ **IA**: Previs√£o de demanda em tempo real\n‚Ä¢ **Sustentabilidade**: Frota el√©trica/h√≠brida"
            
            elif any(word in question_lower for word in ['kpi', 'm√©trica', 'performance', 'indicador', 'dashboard']):
                response = "üìä **KPIs Essenciais para Mobilidade Urbana**:\n\nüî¢ **Operacionais**:\n‚Ä¢ Taxa de convers√£o >80%\n‚Ä¢ Tempo de resposta <5 minutos\n‚Ä¢ Disponibilidade de motoristas >90%\n\nüí∞ **Financeiros**:\n‚Ä¢ GMV crescimento >20% ao m√™s\n‚Ä¢ CAC (Custo de Aquisi√ß√£o) <R$50\n‚Ä¢ LTV/CAC ratio >3:1\n\n‚≠ê **Qualidade**:\n‚Ä¢ NPS >70 pontos\n‚Ä¢ Avalia√ß√£o m√©dia >4.5 estrelas\n‚Ä¢ Taxa de reten√ß√£o >80%"
            
            elif any(word in question_lower for word in ['cancelamento', 'problema', 'falha', 'erro']):
                if total_corridas == 0:
                    response = "‚ö†Ô∏è **Preven√ß√£o de Cancelamentos**: Ainda sem dados, mas quando iniciar, manter <15% √© crucial.\n\nüõ°Ô∏è **Estrat√©gias Preventivas**:\n‚Ä¢ **Matching inteligente**: Proximidade e perfil\n‚Ä¢ **Comunica√ß√£o**: Updates em tempo real\n‚Ä¢ **Incentivos**: Penalidades e recompensas balanceadas"
                else:
                    taxa_cancel = (corridas_canceladas / total_corridas) * 100
                    status = "üü¢ Excelente" if taxa_cancel <= 10 else "üü° Aceit√°vel" if taxa_cancel <= 20 else "üî¥ Cr√≠tico"
                    
                    response = f"‚ö†Ô∏è **An√°lise de Cancelamentos** {status}\n\n‚Ä¢ **Taxa**: {taxa_cancel:.1f}%\n‚Ä¢ **Total Cancelado**: {corridas_canceladas} corridas\n\n**Causas**: Dist√¢ncia, tr√¢nsito, tempo de espera\n**Solu√ß√£o**: {'Manter padr√£o' if taxa_cancel <= 15 else 'Otimizar algoritmo de matching'}"
            
            else:
                # An√°lise geral inteligente
                if total_corridas == 0:
                    response = f"ü§î Sobre '{question}': Sistema em fase de lan√ßamento com dados zerados.\n\nüí° **Posso ajudar com**:\n‚Ä¢ **Lan√ßamento**: Estrutura operacional inicial\n‚Ä¢ **M√©tricas**: KPIs para acompanhar\n‚Ä¢ **Crescimento**: Estrat√©gias de aquisi√ß√£o\n‚Ä¢ **Opera√ß√µes**: Otimiza√ß√£o de processos\n\nEm que √°rea espec√≠fica voc√™ quer focar?"
                else:
                    response = f"üí° Analisando '{question}' com dados reais:\n\nüìä **Status Atual**:\n‚Ä¢ {total_corridas} corridas registradas\n‚Ä¢ R$ {receita_total:,.2f} de receita\n‚Ä¢ {motoristas_ativos} motoristas ativos\n\nPosso detalhar qualquer aspecto espec√≠fico - financeiro, operacional, motoristas ou usu√°rios. O que te interessa mais?"
                        
        except Exception as e:
            # Fallback inteligente
            response = f"ü§î Sobre '{question}': Posso te ajudar com an√°lise de dados de mobilidade urbana, estrat√©gias de crescimento, otimiza√ß√£o de opera√ß√µes ou interpreta√ß√£o de m√©tricas.\n\nüìã **Especialidades**:\n‚Ä¢ An√°lise de performance\n‚Ä¢ Estrat√©gias de expans√£o\n‚Ä¢ Otimiza√ß√£o financeira\n‚Ä¢ Gest√£o de frotas\n\nO que voc√™ gostaria de explorar?"
    
    return {
        'success': True,
        'response': response,
        'timestamp': datetime.now().isoformat(),
        'type': 'chat',
        'mock': True
    }
# Para aplicar o patch
if __name__ == "__main__":
    print("Patch de LLM inteligente criado!")
