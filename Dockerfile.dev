# Dockerfile.dev para desenvolvimento (API + Frontend em modo dev)

# Backend (FastAPI)
FROM python:3.11-slim AS backend-dev
WORKDIR /app
RUN apt-get update && apt-get install -y gcc libpq-dev curl && rm -rf /var/lib/apt/lists/*
COPY backend/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
COPY backend ./backend
COPY main.py ./
COPY dados_exemplo.csv ./
COPY database ./database

# Frontend (Vite dev server)
FROM node:18-alpine AS frontend-dev
WORKDIR /app
COPY frontend/package*.json ./
COPY frontend/vite.config.js ./
COPY frontend/postcss.config.* ./
COPY frontend/tailwind.config.js ./
COPY frontend/src ./src
COPY frontend/public ./public
COPY frontend/index.html ./
RUN npm install
# Instala 'concurrently' para rodar ambos processos e garantir logs dev
RUN npm install -g concurrently

# Final stage: multi-process dev
FROM python:3.11-slim
WORKDIR /app
COPY --from=backend-dev /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-dev /app /app
COPY --from=frontend-dev /app /app/frontend
RUN apt-get update \
    && apt-get install -y curl nodejs npm gcc libpq-dev \
    && rm -rf /var/lib/apt/lists/*
# Garante que uvicorn está instalado no ambiente final
RUN pip install --no-cache-dir uvicorn
RUN ln -s /usr/local/bin/uvicorn /usr/bin/uvicorn
# Instala 'concurrently' globalmente no estágio final
RUN npm install -g concurrently
RUN adduser --system --group appuser
RUN mkdir -p /app/logs /app/uploads && chown -R appuser:appuser /app
USER appuser
EXPOSE 8080 3000

# Entrypoint: roda ambos processos com logs detalhados
CMD ["sh", "-c", "printenv | grep -v '^PWD=' | grep -v '^HOME=' | grep -v '^SHLVL=' | grep -v '^_' > backend/.env; printenv | grep -v '^PWD=' | grep -v '^HOME=' | grep -v '^SHLVL=' | grep -v '^_' > frontend/.env; concurrently --names 'BACKEND,FRONTEND' --prefix-colors 'bgBlue.bold,bgMagenta.bold' \"uvicorn backend.main:app --host 0.0.0.0 --port 8080 --reload --log-level debug\" \"cd frontend && npm run dev -- --host 0.0.0.0 --port 3000\""]
